import cv2
import numpy as np

# Initialize variables
start_x, start_y, end_x, end_y = -1, -1, -1, -1
drawing = False
alpha = 0.5  # 초기 불투명도

def draw_rectangle(event, x, y, flags, param):
    global start_x, start_y, end_x, end_y, drawing, img, alpha

    if event == cv2.EVENT_LBUTTONDOWN:
        drawing = True
        start_x, start_y = x, y
        end_x, end_y = x, y

    elif event == cv2.EVENT_MOUSEMOVE:
        if drawing:
            end_x, end_y = x, y

    elif event == cv2.EVENT_LBUTTONUP:
        drawing = False
        end_x, end_y = x, y
        
        # Draw a semi-transparent red rectangle with adjusted alpha
        color = (0, 0, 255, int(alpha * 255))  # Alpha values range from 0 to 255
        thickness = -1
        overlay = img.copy()
        cv2.rectangle(overlay, (start_x, start_y), (end_x, end_y), color, thickness)
        cv2.addWeighted(overlay, alpha, img, 1 - alpha, 0, img)

        # Display start and end coordinates
        font = cv2.FONT_HERSHEY_SIMPLEX
        text = f'Start: ({start_x}, {start_y}), End: ({end_x}, {end_y})'
        cv2.putText(img, text, (10, 30), font, 1, (0, 0, 0), 2) 

def change_alpha(value):
    global alpha
    alpha = value / 100.0  # Convert the trackbar value to a range of 0.0 to 1.0

# Load the image
image_path = "C:\\Users\\rlaej\\Downloads\\base.png"
img = cv2.imread(image_path)

if img is None:
    print('Error: Unable to load the image')
else:
    desired_width = 600
    desired_height = 600
    img = cv2.resize(img, (desired_width, desired_height))

    # Create a window
    cv2.namedWindow('base image')

    # Create a trackbar for adjusting alpha value
    cv2.createTrackbar('Alpha', 'base image', int(alpha * 100), 100, change_alpha)

    # Set the mouse callback function
    cv2.setMouseCallback('base image', draw_rectangle)

    while True:
        cv2.imshow('base image', img)
        if cv2.waitKey(20) & 0xFF == 27:
            break

    cv2.destroyAllWindows()
